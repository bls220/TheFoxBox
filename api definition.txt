

Current definition of api:

	Every message (android to go, go to android) consists of a JSON object.
	The object is sent like normal text, but is prepended by the length of the json object.
		The length is encoded as a 4-byte little-endian value.

Also the Go program is going to run on port 5853
		
JSON descriptions:
	A song list:
		-Request: "songlist"; "search"; whatever request caused the songlist to be returned
		-Songs: (A list of the following objects)
			-Album: string
			-Artist: string
			-Title: string
			-Id: An id for the song. This id is important because it is what you have to send to the server when requesting/voting on a song

	When requesting the queue:
		-Request: "songlist"
		-AuthToken: The token retrieved from logging in
		-Params:
			(None)
			
	When logging in:
		-Request: "login"
		-Params:
			-Name: Name of the user
			// TODO: probably need to add some more fields here
		
		Returns:
			A JSON object with "AuthToken" equal to the AuthToken you should use for the other methods
	
	When submitting moods:
		-Request: "moodchange"
		-AuthToken: The token retrieved from logging in
		-Params:
			-Mood: String representing the moods. There must be exactly three values separated by semicolons
	
	When doing searches:
		-Request: "search"
		-AuthToken: The token retrieved from logging in
		-Params:
			-Term: String to search for (searches through albums, artist, and title)
	
		Returns:
			A song list
	
	When voting on a song:
		-Request: "vote"
		-AuthToken: The token retrieved from logging in
		-Params:
			-Id: Song id to submit to the queue
			-Amt: The amount to vote. Should be -1 or 1.
	
	When submitting a song:
		-Request: "submit"
		-AuthToken: The token retrieved from logging in
		-Params:
			-Id: Song id to submit to the queue
		
		Returns:
			A JSON object with "Ret" equal to "" (a zero-length string) for success and a descriptive reason why
				they could not add the song if the song could not be queued (recently played, etc)